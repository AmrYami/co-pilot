suite: "DW Contracts â€” Golden"
namespace: "dw::common"

cases:
  - id: status_expire_list
    question: "list all contracts where CONTRACT_STATUS = expire"
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'WHERE'
        - 'CONTRACT_STATUS'
      must_not: []

  - id: patch_fts_single_it
    question: "list all contracts has it"
    expect_contains:
      - "WHERE"
      - "LIKE UPPER(:fts_0)"
      - "ORDER BY REQUEST_DATE DESC"

  - id: patch_fts_or_tokens
    question: "list all contracts has it or home care"
    expect_contains:
      - "LIKE UPPER(:fts_0)"
      - "LIKE UPPER(:fts_1)"
      - "ORDER BY REQUEST_DATE DESC"
    expect_not_contains:
      - "Fallback listing"
    explain_contains:
      - "FTS("

  - id: patch_fts_and_tokens
    question: "list all contracts has it and home care"
    expect_contains:
      - "LIKE UPPER(:fts_0)"
      - "LIKE UPPER(:fts_1)"
      - " AND "
      - "ORDER BY REQUEST_DATE DESC"

  - id: patch_eq_request_type_synonym
    question: "Show contracts where REQUEST TYPE = Renewal"
    expect_contains:
      - "REQUEST_TYPE"
      - "IN ("
      - "ORDER BY REQUEST_DATE DESC"
    expect_not_contains:
      - "Fallback listing"

  - id: patch_group_by_entity_totals
    question: "For ENTITY_NO = 'E-123', total and count by CONTRACT_STATUS."
    expect_contains:
      - "GROUP BY CONTRACT_STATUS"
      - "COUNT(*) AS CNT"

  - id: patch_lowest_gross_top_n
    question: "lowest 5 contracts by gross last month"
    expect_contains:
      - "ORDER BY"
      - " ASC"
      - "FETCH FIRST 5 ROWS ONLY"

  - id: request_type_synonym_filter
    question: "Show contracts where REQUEST TYPE = Renewal"
    expect:
      contains:
        - 'WHERE (UPPER(TRIM(REQUEST_TYPE))'
        - 'ORDER BY REQUEST_DATE DESC'
      must_not:
        - 'FETCH FIRST'
        - 'FROM "Contract"\nORDER BY REQUEST_DATE DESC\n'

  - id: top10_value_last_month
    question: "top 10 contracts by contract value last month"
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'ORDER BY NVL(CONTRACT_VALUE_NET_OF_VAT,0) DESC'
        - 'FETCH FIRST'
      must_not: []
      notes: "Should use active-overlap window (START_DATE..END_DATE) for last month and return all columns."
    assertions:
      overlap: true
      order: { metric: net, dir: desc }

  - id: top10_value_last_8_months
    question: "top 10 contracts by contract value last 8 months"
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'ORDER BY NVL(CONTRACT_VALUE_NET_OF_VAT,0) DESC'
        - 'FETCH FIRST'
      must_not: []
      notes: "Active-overlap window for last 8 months."
    assertions:
      overlap: true
      order: { metric: net, dir: desc }

  - id: expiring_30_days_count
    question: "contracts expiring in 30 days (count)"
    expect:
      sql_like:
        - 'SELECT'
        - 'COUNT(*)'
        - 'FROM "Contract"'
        - 'WHERE'
        - 'END_DATE BETWEEN'
      must_not: []

  - id: requested_last_month_list3
    question: "List all contracts requested last month (contract id, owner, request date)."
    expect:
      sql_like:
        - 'SELECT'
        - 'CONTRACT_ID'
        - 'CONTRACT_OWNER'
        - 'REQUEST_DATE'
        - 'FROM "Contract"'
        - 'REQUEST_DATE BETWEEN'
        - 'ORDER BY REQUEST_DATE DESC'
      must_not: []

  - id: top20_gross_last_month
    question: "Top 20 contracts by gross contract value last month"
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'ORDER BY'
        - 'NVL(CONTRACT_VALUE_NET_OF_VAT,0)'
        - 'NVL(VAT,0)'
        - 'FETCH FIRST'
      must_not: []
      notes: "Gross = NET + VAT (VAT may be percent or absolute)."
    assertions:
      overlap: true
      order: { metric: gross, dir: desc }

  - id: gross_by_owner_dept_last_quarter
    question: "Total gross value of contracts per owner department last quarter"
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'SUM('
        - 'GROUP BY OWNER_DEPARTMENT'
        - 'ORDER BY'
      must_not: []
      notes: "Should use overlap window for last quarter."
    assertions:
      overlap: true
      order: { metric: measure, dir: desc }
      group_by: ["OWNER_DEPARTMENT"]

  - id: gross_by_owner_dept_all_time
    question: "Total gross value of contracts per owner department"
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'SUM('
        - 'GROUP BY OWNER_DEPARTMENT'
        - 'ORDER BY'
      must_not: []
      notes: "No time filter."
    assertions:
      order: { metric: measure, dir: desc }
      group_by: ["OWNER_DEPARTMENT"]

  - id: highest_department_gross_last_quarter
    question: "Owner department with the highest gross last quarter"
    expect_contains:
      - "GROUP BY OWNER_DEPARTMENT"
      - "TOTAL_GROSS"
      - "ORDER BY TOTAL_GROSS DESC"
    assertions:
      order: { metric: measure, dir: desc }
      group_by: ["OWNER_DEPARTMENT"]

  - id: bottom_contracts_by_gross
    question: "bottom contracts by gross last month"
    expect_contains:
      - "ORDER BY NVL(CONTRACT_VALUE_NET_OF_VAT,0) + CASE WHEN"
      - " ASC"
      - "FROM \"Contract\""
    notes: "Direction hints without explicit N should default to ascending order."

  - id: count_by_status_all_time
    question: "Count of contracts by status (all time)"
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'GROUP BY CONTRACT_STATUS'
        - 'COUNT(*)'
        - 'ORDER BY'
      must_not: []

  - id: with_end_date_next_90_days
    question: "Contracts with END_DATE in the next 90 days."
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'WHERE'
        - 'END_DATE BETWEEN'
      must_not: []
    assertions:
      end_only: true

  - id: vat_zero_value_gt_zero
    question: "Contracts where VAT is null or zero but CONTRACT Value > 0."
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'WHERE'
        - 'NVL(VAT,0) = 0'
        - 'NVL(CONTRACT_VALUE_NET_OF_VAT,0) > 0'
      must_not: []

  - id: renewal_2023
    question: "Show contracts where REQUEST TYPE = Renewal in 2023."
    assert_all_of:
      - 'REQUEST_DATE BETWEEN :date_start AND :date_end'
      - 'UPPER(REQUEST_TYPE)'
      - 'LIKE UPPER(:v_like)'
      - 'ORDER BY REQUEST_DATE DESC'
    assertions:
      request_window: true

  - id: request_type_equals_renewal
    question: "Show contracts where REQUEST TYPE = Renewal"
    expect:
      sql_like:
        - 'FROM "Contract"'
      must_not: []
    assert_all_of:
      - 'UPPER(TRIM(REQUEST_TYPE))'
      - 'LIKE'
      - 'ORDER BY REQUEST_DATE DESC'

  - id: fts_like_tokens_or
    question: "list all contracts has it or home care"
    expect:
      sql_like:
        - 'LIKE UPPER(:fts_0)'
        - 'LIKE UPPER(:fts_1)'
        - 'ORDER BY REQUEST_DATE DESC'
      must_not:
        - 'Fallback listing ordered'

  - id: eq_multiple_filters_email
    question: "list all contracts has it or home care and ENTITY = DSFH and REPRESENTATIVE_EMAIL = samer@procare-sa.com"
    expect:
      sql_like:
        - 'LIKE UPPER(:fts_0)'
        - 'UPPER(TRIM(ENTITY)) = UPPER(TRIM(:eq_0))'
        - 'UPPER(TRIM(REPRESENTATIVE_EMAIL)) = UPPER(TRIM(:eq_1))'
        - 'ORDER BY REQUEST_DATE DESC'
      must_not:
        - 'Fallback listing ordered'

  - id: distinct_entity_counts
    question: "List distinct ENTITY values and their contract counts."
    expect:
      sql_like:
        - 'SELECT'
        - 'ENTITY'
        - 'COUNT(*)'
        - 'FROM "Contract"'
        - 'GROUP BY ENTITY'
        - 'ORDER BY'
      must_not: []

  - id: list_owner_departments
    question: "list contracts owneres department."
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'OWNER_DEPARTMENT'
      must_not: []
      notes: "Either SELECT DISTINCT OWNER_DEPARTMENT or GROUP BY OWNER_DEPARTMENT is acceptable."

  - id: missing_contract_id
    question: "Contracts missing CONTRACT_ID (data quality check)."
    sql: |
      SELECT *
      FROM "Contract"
      WHERE CONTRACT_ID IS NULL OR TRIM(CONTRACT_ID) = ''
      ORDER BY REQUEST_DATE DESC
    expect:
      sql_like:
        - 'CONTRACT_ID IS NULL'
  - id: fts_like_or_tokens
    question: "list all contracts has it or home care"
    full_text_search: true
    expect:
      contains:
        - 'WHERE ('
        - "LIKE UPPER(:fts_0)"
        - "LIKE UPPER(:fts_1)"
        - 'ORDER BY REQUEST_DATE DESC'
  - id: eq_detected_from_question
    question: "Show contracts where REQUEST TYPE = Renewal"
    expect:
      contains:
        - 'REQUEST_TYPE'
        - 'ORDER BY REQUEST_DATE DESC'
      must_not:
        - 'FETCH FIRST'
  - id: combined_fts_and_eq
    question: "list all contracts has it or home care and ENTITY = DSFH"
    full_text_search: true
    expect:
      contains:
        - 'UPPER(TRIM(ENTITY)) = UPPER(TRIM(:eq_0))'
        - 'LIKE UPPER(:fts_0)'
        - 'LIKE UPPER(:fts_1)'
        - 'ORDER BY REQUEST_DATE DESC'
        - "TRIM(CONTRACT_ID) = ''"

  - id: fts_or_tokens_auto
    question: "list all contracts has it or home care"
    expect:
      sql_contains:
        - 'WHERE'
        - 'LIKE'
        - ' OR '
        - 'ORDER BY REQUEST_DATE DESC'
      fts:
        join: 'OR'

  - id: fts_and_tokens_auto
    question: "list all contracts has it and home care"
    expect:
      sql_contains:
        - 'WHERE'
        - 'LIKE'
        - ') AND ('
        - 'ORDER BY REQUEST_DATE DESC'
      fts:
        join: 'AND'

  - id: fts_short_token_it
    question: "list all contracts has it"
    flags: { full_text_search: true }
    full_text_search: true
    expect_sql_contains:
      - 'LIKE UPPER(:fts_0)'
      - 'ORDER BY REQUEST_DATE DESC'
    expect_binds:
      - fts_0

  - id: fts_multiple_terms
    question: "list all contracts has it or home care"
    flags: { full_text_search: true }
    full_text_search: true
    expect_sql_contains:
      - 'LIKE UPPER(:fts_0)'
      - 'LIKE UPPER(:fts_1)'
    expect_binds:
      - fts_0
      - fts_1

  - id: fts_tokens_from_settings
    question: "list all contracts has it or home care"
    full_text_search: true
    expect:
      sql_contains:
        - 'UPPER(TRIM(CONTRACT_SUBJECT)) LIKE'
        - 'UPPER(TRIM(CONTRACT_PURPOSE)) LIKE'
        - 'ORDER BY REQUEST_DATE DESC'
      not_contains:
        - 'ORDER BY REQUEST_DATE DESC\nORDER BY REQUEST_DATE DESC'

  - id: dept_equality_alias
    question: "list all contracts where departments = SUPPORT SERVICES"
    expect_sql_contains:
      - 'UPPER(TRIM(OWNER_DEPARTMENT)) = UPPER(:eq_dept_0)'

  - id: stakeholder_alias_has
    question: "list all contracts where stakeholder has Tamer Said Aly Abdelgawad or u1835 or Amr Taher A Maghrabi"
    expect_sql_contains:
      - 'CONTRACT_STAKEHOLDER_1'
      - 'LIKE UPPER(:eq_stk_0)'
      - 'LIKE UPPER(:eq_stk_1)'
      - 'LIKE UPPER(:eq_stk_2)'

  - id: entity_status_totals_with_rate
    question: "For ENTITY_NO = 'E-123', total and count by CONTRACT_STATUS."
    rate:
      comment: "filter: ENTITY_NO = 'E-123' (ci, trim); group_by: CONTRACT_STATUS; order_by: TOTAL_GROSS desc;"
    expect_contains:
      - 'GROUP BY CONTRACT_STATUS'
      - 'SUM(NVL(CONTRACT_VALUE_NET_OF_VAT,0) +'
      - 'COUNT(*) AS CNT'
      - 'ORDER BY TOTAL_GROSS DESC'
      - 'UPPER(TRIM(ENTITY_NO)) = UPPER(TRIM(:eq_0))'
    must_not: []

  - id: named_filter_request_type_equals
    question: "Show contracts where REQUEST TYPE = Renewal"
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'WHERE'
        - 'UPPER(TRIM(REQUEST_TYPE))'
        - 'ORDER BY REQUEST_DATE DESC'
      must_not:
        - 'FROM "Contract"\nORDER BY REQUEST_DATE DESC'
    assertions:
      binds_any:
        - ["nf_REQUESTTYPE_eq_0", "nf_REQUESTTYPE_pf_0", "nf_REQUESTTYPE_cf_0", "nf_REQUESTTYPE_raw"]

  - id: gross_by_stakeholder_last_90
    question: "For the last 90 days, total gross by stakeholder (across 1..8 slots)."
    expect:
      sql_like:
        - 'WITH S AS ('
        - 'CONTRACT_STAKEHOLDER_1 AS STAKEHOLDER'
        - 'UNION ALL'
        - 'GROUP BY STAKEHOLDER'
        - 'ORDER BY MEASURE DESC'
      must_not: []
      notes: "Ok if current version groups by CONTRACT_STAKEHOLDER_1; advanced version may UNPIVOT 1..8."
    assertions:
      overlap: true
      order: { metric: measure, dir: desc }
      group_by: ["STAKEHOLDER"]

  - id: top5_gross_2024_ytd
    question: "For 2024 YTD, top 5 contracts by gross."
    binds:
      date_start: 2024-01-01
      date_end: !today
      top_n: 5
    sql: |
      SELECT *
      FROM "Contract"
      WHERE (START_DATE IS NOT NULL AND END_DATE IS NOT NULL
         AND START_DATE <= :date_end
         AND END_DATE >= :date_start)
      ORDER BY NVL(CONTRACT_VALUE_NET_OF_VAT,0)
           + CASE WHEN NVL(VAT,0) BETWEEN 0 AND 1
                  THEN NVL(CONTRACT_VALUE_NET_OF_VAT,0) * NVL(VAT,0)
                  ELSE NVL(VAT,0) END DESC
      FETCH FIRST :top_n ROWS ONLY
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'ORDER BY'
        - 'NVL(CONTRACT_VALUE_NET_OF_VAT,0)'
        - 'NVL(VAT,0)'
        - 'FETCH FIRST :top_n ROWS ONLY'
        - 'START_DATE <= :date_end'
        - 'END_DATE >= :date_start'
      must_not: []

  - id: avg_gross_per_request_type_6m
    question: "Average gross per REQUEST_TYPE in the last 6 months."
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'AVG('
        - 'GROUP BY REQUEST_TYPE'
        - 'REQUEST_DATE BETWEEN'
      must_not: []

  - id: monthly_trend_last_12_by_request_date
    question: "Monthly trend (last 12 months) of active contracts (by REQUEST_DATE)."
    expect:
      sql_like:
        - "TRUNC(REQUEST_DATE, 'MM') AS MONTH"
        - "GROUP BY TRUNC(REQUEST_DATE, 'MM')"
        - 'ORDER BY MONTH ASC'
      must_not: []
      notes: "A pure SELECT with REQUEST_DATE window is acceptable; a grouped month bucket is nicer but optional."
    assertions:
      request_window: true

  - id: fts_like_fallback_single_token
    question: "list all contracts has it"
    expect_sql_contains:
      - "UPPER(NVL(CONTRACT_SUBJECT,'')) LIKE UPPER(:fts_0)"
      - "ORDER BY REQUEST_DATE DESC"
    expect_sql_not_contains:
      - "ORDER BY REQUEST_DATE DESC\nORDER BY REQUEST_DATE DESC"
    expect_binds:
      - fts_0
    assertions: {}

  - id: fts_like_fallback_or_tokens
    question: "list all contracts has it or home care"
    expect_sql_contains:
      - "UPPER(NVL(CONTRACT_SUBJECT,'')) LIKE UPPER(:fts_0)"
      - "UPPER(NVL(CONTRACT_SUBJECT,'')) LIKE UPPER(:fts_1)"
      - " ORDER BY REQUEST_DATE DESC"
    expect_binds:
      - fts_0
      - fts_1

  - id: fts_like_fallback_with_eq
    question: "list all contracts has it or home care and ENTITY = DSFH and REPRESENTATIVE_EMAIL = samer@procare-sa.com"
    expect_sql_contains:
      - "UPPER(NVL(CONTRACT_SUBJECT,'')) LIKE UPPER(:fts_0)"
      - "UPPER(NVL(CONTRACT_SUBJECT,'')) LIKE UPPER(:fts_1)"
      - "UPPER(TRIM(ENTITY)) = UPPER(TRIM(:eq_0))"
      - "UPPER(TRIM(REPRESENTATIVE_EMAIL)) = UPPER(TRIM(:eq_1))"
      - " ORDER BY REQUEST_DATE DESC"
    expect_binds:
      - fts_0
      - fts_1
      - eq_0
      - eq_1

  - id: entity_no_total_count_by_status
    question: "For ENTITY_NO = 'E-123', total and count by CONTRACT_STATUS."
    expect:
      contains:
        - 'WHERE '
        - 'ENTITY_NO'
        - 'GROUP BY CONTRACT_STATUS'
        - 'SUM(NVL(CONTRACT_VALUE_NET_OF_VAT,0)'
        - 'COUNT(*) AS CNT'
      not_contains:
        - 'SELECT COUNT(*) AS CNT FROM "Contract" WHERE (UPPER(ENTITY_NO) ='
    assertions:
      group_by: ["CONTRACT_STATUS"]

  - id: expiring_30_60_90_counts
    question: "Contracts expiring in 30/60/90 days (three separate counts)."
    expect:
      sql_like:
        - 'SELECT 30 AS BUCKET_DAYS'
        - 'UNION ALL'
        - 'SELECT 90 AS BUCKET_DAYS'
      must_not: []
      notes: "Accept union of three counts or three separate queries; runner only checks fragments."
    assertions: {}

  - id: highest_avg_gross_last_quarter
    question: "Owner department with the highest average gross last quarter."
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'AVG('
        - 'GROUP BY OWNER_DEPARTMENT'
        - 'FETCH FIRST'
      must_not: []
      notes: "May also FETCH FIRST 1 ROW ONLY."
    assertions:
      overlap: true
      order: { metric: measure, dir: desc }
      group_by: ["OWNER_DEPARTMENT"]

  - id: stakeholders_more_than_n_in_2024
    question: "Stakeholders involved in more than N contracts in 2024."
    assert_all_of:
      - 'HAVING COUNT(*) > :min_n'
      - 'GROUP BY STAKEHOLDER'
    assert_any_of:
      - 'ORDER BY CNT DESC'
      - 'ORDER BY MEASURE DESC'
    assertions:
      request_window: true
      group_by: ["STAKEHOLDER"]

  - id: missing_representative_email
    question: "Contracts where representative_email is missing."
    expect:
      sql_like:
        - 'representative_email IS NULL'
        - "TRIM(representative_email) = ''"
        - 'ORDER BY REQUEST_DATE DESC'
      must_not: []
    assertions: {}

  - id: requester_quarter_totals
    question: "For REQUESTER = 'john@corp', total gross & count by quarter."
    expect:
      sql_like:
        - "TRUNC(REQUEST_DATE,'Q') AS QUARTER"
        - 'SUM('
        - 'COUNT(*) AS CNT'
        - 'UPPER(REQUESTER)=UPPER(:requester)'
      must_not: []
    assertions:
      group_by: ["TRUNC(REQUEST_DATE,'Q')"]

  - id: stakeholder_depts_2024
    question: "For each stakeholder, list distinct departments they touched in 2024, total gross, and contract count (one row per stakeholder)."
    assert_all_of:
      - 'LISTAGG(DISTINCT OWNER_DEPARTMENT'
      - 'GROUP BY STAKEHOLDER'
    assert_any_of:
      - 'ORDER BY TOTAL_GROSS DESC'
      - 'ORDER BY MEASURE DESC'
    assertions:
      overlap: true
      group_by: ["STAKEHOLDER"]

  - id: top10_pairs_last_180
    question: "Top 10 contracts pairs by gross in the last 180 days."
    expect:
      sql_like:
        - 'WITH P AS ('
        - 'GROUP BY OWNER_DEPARTMENT, STAKEHOLDER'
        - 'FETCH FIRST 10 ROWS ONLY'
      must_not: []
      notes: "This is advanced (self-join); we only check basic fragments."
    assertions:
      overlap: true
      order: { metric: measure, dir: desc }
      group_by: ["OWNER_DEPARTMENT", "STAKEHOLDER"]

  - id: duplicate_contract_ids
    question: "Detect duplicate contract ids (same CONTRACT_ID across rows)."
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'GROUP BY CONTRACT_ID'
        - 'HAVING'
        - 'ORDER BY CNT DESC'
      must_not: []

  - id: median_gross_by_owner_dept_this_year
    question: "Median gross value of contracts per owner department this year."
    assert_all_of:
      - 'MEDIAN('
      - 'GROUP BY OWNER_DEPARTMENT'
    assertions:
      overlap: true
      order: { metric: measure, dir: desc }
      group_by: ["OWNER_DEPARTMENT"]

  - id: end_before_start_check
    question: "Contracts where END_DATE < START_DATE (integrity check)."
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'WHERE'
        - 'END_DATE < START_DATE'
      must_not: []
    assertions: {}

  - id: duration_12m_mismatch
    question: "Contracts with DURATION like \"12 months\" but actual END_DATEâ€“START_DATE != ~12 months."
    expect:
      sql_like:
        - 'FROM "Contract"'
        - 'REGEXP_LIKE'
        - 'MONTHS_BETWEEN'
      must_not: []
    assertions: {}

  - id: yoy_gross_same_period
    question: "Year-over-year comparison of gross total for the same period (e.g., this Janâ€“Mar vs last Janâ€“Mar)."
    binds:
      ds: "2025-01-01"
      de: "2025-03-31"
      p_ds: "2024-01-01"
      p_de: "2024-03-31"
    assert_all_of:
      - 'START_DATE <= :de'
      - 'END_DATE >= :ds'
      - 'START_DATE <= :p_de'
      - 'END_DATE >= :p_ds'
    assertions: {}

  - id: status_active_pending_over_threshold
    question: "For CONTRACT_STATUS in ('Active','Pending'), list contracts whose total gross exceeds a threshold (e.g., > 1,000,000)."
    binds:
      s0: "active"
      s1: "pending"
      thr: 1000000
    expect:
      sql_like:
        - 'CONTRACT_STATUS IN (:s0, :s1)'
        - 'NVL(CONTRACT_VALUE_NET_OF_VAT,0)'
        - 'ELSE NVL(VAT,0) END) > :thr'
      must_not: []
    assertions: {}

  - id: top3_by_entity_last_365
    question: "For each ENTITY, top 3 contracts by gross in last 365 days."
    binds:
      date_start: !start_of_prev_months 12
      date_end: !end_of_prev_months 0
    expect:
      sql_like:
        - 'ROW_NUMBER() OVER (PARTITION BY ENTITY'
        - 'START_DATE <= :date_end'
        - 'END_DATE >= :date_start'
        - 'WHERE rn <= 3'
      must_not: []
    assertions:
      overlap: true

  - id: owner_dept_vs_oul_mismatch
    question: "OWNER_DEPARTMENT vs DEPARTMENT_OUL comparison (where OUL is the lead); list any cases."
    expect:
      sql_like:
        - 'DEPARTMENT_OUL IS NOT NULL'
        - "NVL(TRIM(OWNER_DEPARTMENT),'(None)') <> NVL(TRIM(DEPARTMENT_OUL),'(None)')"
        - 'ORDER BY CNT DESC'
      must_not: []
    assertions:
      owner_vs_oul_mismatch: true

  - question: "bottom 5 contracts by contract value last month"
    expect_sql:
      contains:
        - 'ORDER BY NVL(CONTRACT_VALUE_NET_OF_VAT,0) ASC'
        - 'FETCH FIRST 5 ROWS ONLY'
        - 'START_DATE <= :date_end'
        - 'END_DATE >= :date_start'
    binds:
      date_start: !start_of_last_month
      date_end: !end_of_last_month
      top_n: 5

  - question: "lowest owner department by gross last quarter"
    expect_sql:
      contains:
        - 'OWNER_DEPARTMENT AS GROUP_KEY'
        - 'SUM(NVL(CONTRACT_VALUE_NET_OF_VAT,0)'
        - 'ORDER BY MEASURE ASC'

  - id: request_type_enum_filter
    question: "Show contracts where REQUEST TYPE = Renewal"
    expect:
      contains:
        - 'WHERE (UPPER(TRIM(REQUEST_TYPE))'
        - 'ORDER BY REQUEST_DATE DESC'
        - ':rt_eq_0'

  - question: "Total gross value per DEPARTMENT_OUL last quarter"
    expect_sql:
      contains:
        - 'DEPARTMENT_OUL AS GROUP_KEY'
        - 'SUM(NVL(CONTRACT_VALUE_NET_OF_VAT,0)'
        - 'START_DATE <= :date_end'
        - 'END_DATE >= :date_start'
    binds:
      date_start: !start_of_last_quarter
      date_end: !end_of_last_quarter

  - question: "Count of contracts per ENTITY_NO"
    expect_sql:
      contains:
        - 'ENTITY_NO AS GROUP_KEY'
        - 'COUNT(*) AS CNT'
        - 'GROUP BY ENTITY_NO'
  - id: fts_has_it_or_home_care
    question: "list all contracts has it or home care"
    expect_sql_contains:
      - 'LIKE UPPER(:fts_0)'
      - 'LIKE UPPER(:fts_1)'
    expect_binds:
      - fts_0
      - fts_1

  - id: eq_departments_support_services
    question: "list all contracts where departments = SUPPORT SERVICES"
    expect_sql_contains:
      - 'UPPER(TRIM(OWNER_DEPARTMENT)) = UPPER(TRIM(:eq_0))'
    expect_binds:
      - eq_0

  - id: stakeholder_like_or
    question: "list all contracts where stackholder has u1835 or Amr Taher"
    expect_sql_contains:
      - 'CONTRACT_STAKEHOLDER_1'
      - 'CONTRACT_STAKEHOLDER_8'
      - 'LIKE UPPER(:fts_0)'
      - 'LIKE UPPER(:fts_1)'
    expect_binds:
      - fts_0
      - fts_1
  - ns: dw::common
    q: "list all contracts has it or home care"
    expect:
      contains_sql:
        - "LIKE UPPER(:fts_0)"
        - "LIKE UPPER(:fts_1)"
        - "ORDER BY REQUEST_DATE DESC"

  - ns: dw::common
    q: "list all contracts where has it"
    expect:
      contains_sql:
        - "LIKE UPPER(:fts_0)"
        - "ORDER BY REQUEST_DATE DESC"

  - ns: dw::common
    q: "list all contracts where departments = SUPPORT SERVICES"
    expect:
      contains_sql:
        - "OWNER_DEPARTMENT"
        - "DEPARTMENT_OUL"
        - "DEPARTMENT_1"
        - "DEPARTMENT_8"
        - "ORDER BY REQUEST_DATE DESC"

  - ns: dw::common
    q: "list all contracts where stakeholder has Tamer Said Aly Abdelgawad or u1835 or Amr Taher A Maghrabi"
    expect:
      contains_sql:
        - "CONTRACT_STAKEHOLDER_1"
        - "CONTRACT_STAKEHOLDER_8"
        - "LIKE UPPER(:st_0)"
        - "LIKE UPPER(:st_1)"
        - "LIKE UPPER(:st_2)"
  - namespace: dw::common
    question: "list all contracts has it"
    expect:
      contains:
        - 'LIKE UPPER(:fts_0)'
        - 'ORDER BY REQUEST_DATE DESC'
      binds:
        - 'fts_0'

  - namespace: dw::common
    question: "list all contracts has it or home care"
    expect:
      contains:
        - 'LIKE UPPER(:fts_0)'
        - 'LIKE UPPER(:fts_1)'
      binds:
        - 'fts_0'
        - 'fts_1'

  - namespace: dw::common
    question: "list all contracts where departments = SUPPORT SERVICES"
    expect:
      contains:
        - 'UPPER(TRIM(OWNER_DEPARTMENT)) = UPPER(TRIM(:eq_0))'
      binds:
        - 'eq_0'
- namespace: dw::common
  question: "list all contracts has it or home care"
  full_text_search: true
  expect_sql_contains:
    - "LIKE UPPER(:fts_0)"
    - "LIKE UPPER(:fts_1)"
    - "ORDER BY REQUEST_DATE DESC"
  expect_sql_not_contains:
    - "SELECT * FROM \"Contract\"\nORDER BY REQUEST_DATE DESC\nORDER BY REQUEST_DATE DESC"

- namespace: dw::common
  question: "list all contracts has it or home care and ENTITY = DSFH and REPRESENTATIVE_EMAIL = samer@procare-sa.com"
  full_text_search: true
  expect_sql_contains:
    - "LIKE UPPER(:fts_0)"
    - "LIKE UPPER(:fts_1)"
    - "UPPER(TRIM(ENTITY)) = UPPER(TRIM(:eq_0))"
    - "UPPER(TRIM(REPRESENTATIVE_EMAIL)) = UPPER(TRIM(:eq_1))"
    - "ORDER BY REQUEST_DATE DESC"
# --- Patch 2 Golden Adds ------------------------------------------------------
- question: "Show contracts where REQUEST TYPE = Renewal"
  namespace: "dw::common"
  ok: true
  assert_sql_contains:
    - "UPPER(TRIM(REQUEST_TYPE))"
    - "IN ("
    - "ORDER BY REQUEST_DATE DESC"
  assert_not_contains:
    - "Fallback listing"

- question: "list all contracts has it"
  namespace: "dw::common"
  full_text_search: true
  ok: true
  assert_sql_contains:
    - "LIKE UPPER(:fts_0)"
  assert_not_contains:
    - "no_columns"
    - "Fallback listing"

- question: "list all contracts has it or home care"
  namespace: "dw::common"
  full_text_search: true
  ok: true
  assert_sql_contains:
    - "LIKE UPPER(:fts_0)"
    - "LIKE UPPER(:fts_1)"
    - " ORDER BY REQUEST_DATE DESC"

- question: "For ENTITY_NO = 'E-123', total and count by CONTRACT_STATUS."
  namespace: "dw::common"
  ok: true
  assert_sql_contains:
    - "GROUP BY CONTRACT_STATUS"
    - "ORDER BY TOTAL_GROSS DESC"
  assert_not_contains:
    - "Fallback listing"

- question: "bottom 5 by gross last month"
  namespace: "dw::common"
  ok: true
  assert_sql_contains:
    - "ORDER BY TOTAL_GROSS ASC"
    - "FETCH FIRST 5 ROWS ONLY"
