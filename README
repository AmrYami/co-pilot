# keep both GPUs visible
unset CUDA_VISIBLE_DEVICES

# include both arches (or 8.6 + 9.0 if 12.0 is not supported by your nvcc)
export TORCH_CUDA_ARCH_LIST=8.6;12.0
export EXLLAMAV2_CUDA_ARCHS=86,120

rm -rf ~/.cache/torch_extensions
find venv/lib/python3.12/site-packages/exllamav2 -name build -type d -prune -exec rm -rf {} +

python -m flask run --reload

export TORCH_CUDA_ARCH_LIST="8.6;9.0+PTX"

pip install --no-index --find-links=./wheels psycopg2-binary==2.9.10
pip download -d /var/www/longchain/wheels pygments==2.18.0
pip install --no-index --find-links /var/www/longchain/wheels -r requirements.lock
pip download -d /var/www/longchain/wheels -r requirements.lock
python -m pip install --no-index --find-links /var/www/longchain/wheels flash-attn==2.5.8


python3 check_exllamav2.py



# fresh shell
# GPU visibility
export LLM_GPU=0,1
export CUDA_VISIBLE_DEVICES=0,1

# ExLlamaV2 runtime
export EXL2_FORCE_BASE=1              # disable dynamic/paged attention path
export EXL2_CACHE_MAX_SEQ_LEN=1024    # shrink KV cache footprint
export RESERVE_VRAM_GB=1              # 1 GB safety on the secondary (GPU1)
export EXLLAMA_CACHE_8BIT=1           # 8-bit KV cache (cuts cache VRAM)
export EXLLAMA_NO_DISCARD=0           # allow discards to free memory
unset GPU_SPLIT                        # force autosplit

# Compiler arches (you already built with these)
export TORCH_CUDA_ARCH_LIST="8.6;9.0+PTX"


FLASK_APP=main:create_app \
PYTORCH_ALLOC_CONF=expandable_segments:True,max_split_size_mb:64 \
flask run



test cases:
python -m tests.run_golden --cases tests/golden/dw_cases.yaml




# recommended env while we keep Base (stable)
export LLM_GPU=0,1
export EXL2_FORCE_BASE=1
export EXL2_CACHE_MAX_SEQ_LEN=2048
export RESERVE_VRAM_GB=2
unset GPU_SPLIT
export TORCH_CUDA_ARCH_LIST="8.6;9.0+PTX"
export PYTORCH_ALLOC_CONF="expandable_segments:True,max_split_size_mb:64"

FLASK_APP=main:create_app
flask run


# then:
curl -s http://127.0.0.1:5000/health
curl -s -X POST http://127.0.0.1:5000/fa/answer \
  -H 'Content-Type: application/json' \
  -d '{"question":"hello","prefixes":["2_"]}'


ada0cb7fe3ce8f35023d648179118888791b7d09

5ebee83




















python3 check_and_import_contracts.py \
  --dsn localhost:1521/FREEPDB1 \
  --user docuware \
  --password 'Strong#Pass1' \
  --excel "Sample Contracts 2.xlsx"














 (caseâ€‘insensitive):

filter: CONTRACT_STATUS = expire


contains / LIKE:

filter: REQUEST_TYPE ~ renew


IN list:

filter: CONTRACT_STATUS in (Active, Pending)


BETWEEN :

filter: REQUEST_DATE between 2024-01-01 and 2024-12-31